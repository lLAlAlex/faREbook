package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *commentLikeResolver) User(ctx context.Context, obj *model.CommentLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Comment is the resolver for the comment field.
func (r *commentLikeResolver) Comment(ctx context.Context, obj *model.CommentLike) (*model.PostComment, error) {
	comment := &model.PostComment{}
	if err := r.DB.Where("id = ?", obj.CommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// User is the resolver for the user field.
func (r *commentReplyResolver) User(ctx context.Context, obj *model.CommentReply) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Comment is the resolver for the comment field.
func (r *commentReplyResolver) Comment(ctx context.Context, obj *model.CommentReply) (*model.PostComment, error) {
	comment := &model.PostComment{}
	if err := r.DB.Where("id = ?", obj.CommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// CreateCommentLike is the resolver for the createCommentLike field.
func (r *mutationResolver) CreateCommentLike(ctx context.Context, userID string, commentID string) (*model.CommentLike, error) {
	like := &model.CommentLike{
		ID:        uuid.NewString(),
		UserID:    userID,
		CommentID: commentID,
	}
	tx := r.DB.Begin()

	var postComment *model.PostComment
	if err := tx.First(&postComment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	postComment.Likes = postComment.Likes + 1

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateCommentReply is the resolver for the createCommentReply field.
func (r *mutationResolver) CreateCommentReply(ctx context.Context, userID string, commentID string, reply string) (*model.CommentReply, error) {
	replies := &model.CommentReply{
		ID:        uuid.NewString(),
		UserID:    userID,
		CommentID: commentID,
		Reply:     reply,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
	}
	tx := r.DB.Begin()

	var postComment *model.PostComment
	if err := tx.First(&postComment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	postComment.Replies = postComment.Replies + 1

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&replies).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return replies, nil
}

// DeleteCommentLike is the resolver for the deleteCommentLike field.
func (r *mutationResolver) DeleteCommentLike(ctx context.Context, userID string, commentID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.CommentLike{}, "user_id = ? AND comment_id = ?", userID, commentID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var comment *model.PostComment
	if err := tx.First(&comment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	comment.Likes = comment.Likes - 1
	if err := tx.Save(&comment).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// DeleteCommentReply is the resolver for the deleteCommentReply field.
func (r *mutationResolver) DeleteCommentReply(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCommentReply - deleteCommentReply"))
}

// GetCommentReplies is the resolver for the getCommentReplies field.
func (r *queryResolver) GetCommentReplies(ctx context.Context, commentID string) ([]*model.CommentReply, error) {
	replies := []*model.CommentReply{}
	if err := r.DB.Where("comment_id = ?", commentID).Find(&replies).Error; err != nil {
		return nil, err
	}
	return replies, nil
}

// GetLikedComments is the resolver for the getLikedComments field.
func (r *queryResolver) GetLikedComments(ctx context.Context, token string) ([]*model.CommentLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	comments := []*model.CommentLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// CommentLike returns CommentLikeResolver implementation.
func (r *Resolver) CommentLike() CommentLikeResolver { return &commentLikeResolver{r} }

// CommentReply returns CommentReplyResolver implementation.
func (r *Resolver) CommentReply() CommentReplyResolver { return &commentReplyResolver{r} }

type commentLikeResolver struct{ *Resolver }
type commentReplyResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *commentReplyResolver) CreatedAt(ctx context.Context, obj *model.CommentReply) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}
func (r *commentReplyResolver) Likes(ctx context.Context, obj *model.CommentReply) (int, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}
