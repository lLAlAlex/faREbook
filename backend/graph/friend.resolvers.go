package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *friendResolver) User(ctx context.Context, obj *model.Friend) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Friend is the resolver for the friend field.
func (r *friendResolver) Friend(ctx context.Context, obj *model.Friend) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.FriendID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *friendRequestResolver) User(ctx context.Context, obj *model.FriendRequest) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// RequestedUser is the resolver for the requestedUser field.
func (r *friendRequestResolver) RequestedUser(ctx context.Context, obj *model.FriendRequest) (*model.User, error) {
	requestedUser := &model.User{}
	if err := r.DB.Where("id = ?", obj.RequestedUserID).First(requestedUser).Error; err != nil {
		return nil, err
	}
	return requestedUser, nil
}

// CreateFriendRequest is the resolver for the createFriendRequest field.
func (r *mutationResolver) CreateFriendRequest(ctx context.Context, userID string, requestedUserID string) (*model.FriendRequest, error) {
	friendRequest := &model.FriendRequest{
		ID:              uuid.NewString(),
		UserID:          userID,
		RequestedUserID: requestedUserID,
	}
	return friendRequest, r.DB.Save(&friendRequest).Error
}

// CreateFriend is the resolver for the createFriend field.
func (r *mutationResolver) CreateFriend(ctx context.Context, userID string, friendID string) (*model.Friend, error) {
	friend := &model.Friend{
		ID:       uuid.NewString(),
		UserID:   userID,
		FriendID: friendID,
	}
	if err := r.DB.Create(friend).Error; err != nil {
		return nil, err
	}

	reverseFriend := &model.Friend{
		ID:       uuid.NewString(),
		UserID:   friendID,
		FriendID: userID,
	}
	if err := r.DB.Create(reverseFriend).Error; err != nil {
		return nil, err
	}

	return friend, nil
}

// DeleteFriendRequest is the resolver for the deleteFriendRequest field.
func (r *mutationResolver) DeleteFriendRequest(ctx context.Context, id string) (bool, error) {
	friendRequest := &model.FriendRequest{}
	if err := r.DB.Where("id = ?", id).First(&friendRequest).Error; err != nil {
		return false, err
	}
	if err := r.DB.Delete(&friendRequest).Error; err != nil {
		return false, err
	}
	return true, nil
}

// DeleteFriend is the resolver for the deleteFriend field.
func (r *mutationResolver) DeleteFriend(ctx context.Context, id string) (bool, error) {
	friend := &model.Friend{}
	if err := r.DB.Where("id = ?", id).First(&friend).Error; err != nil {
		return false, err
	}
	if err := r.DB.Delete(&friend).Error; err != nil {
		return false, err
	}
	return true, nil
}

// GetFriendRequests is the resolver for the getFriendRequests field.
func (r *queryResolver) GetFriendRequests(ctx context.Context, token string) ([]*model.FriendRequest, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	requests := []*model.FriendRequest{}
	if err := r.DB.Where("requested_user_id = ?", user.ID).Find(&requests).Error; err != nil {
		return nil, err
	}
	return requests, nil
}

// GetUserFriendRequests is the resolver for the getUserFriendRequests field.
func (r *queryResolver) GetUserFriendRequests(ctx context.Context, userID string) ([]*model.FriendRequest, error) {
	requests := []*model.FriendRequest{}
	if err := r.DB.Where("user_id = ?", userID).Find(&requests).Error; err != nil {
		return nil, err
	}
	return requests, nil
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context, token string) ([]*model.Friend, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	friends := []*model.Friend{}
	if err := r.DB.Where("friend_id = ?", user.ID).Find(&friends).Error; err != nil {
		return nil, err
	}
	return friends, nil
}

// GetUserFriends is the resolver for the getUserFriends field.
func (r *queryResolver) GetUserFriends(ctx context.Context, userID string) ([]*model.Friend, error) {
	friends := []*model.Friend{}
	if err := r.DB.Where("friend_id = ?", userID).Find(&friends).Error; err != nil {
		return nil, err
	}
	return friends, nil
}

// GetFriendSuggestions is the resolver for the getFriendSuggestions field.
func (r *queryResolver) GetFriendSuggestions(ctx context.Context, token string) ([]*model.User, error) {
	user, err := r.GetUserByToken(ctx, token)
	if err != nil {
		return nil, err
	}

	var friends []*model.Friend
	if err := r.DB.Where("user_id = ?", user.ID).Find(&friends).Error; err != nil {
		return nil, err
	}

	friendIDs := make([]string, len(friends))
	for i, friend := range friends {
		friendIDs[i] = friend.FriendID
	}

	var requestedFriends []*model.FriendRequest
	if err := r.DB.Where("user_id = ?", user.ID).Find(&requestedFriends).Error; err != nil {
		return nil, err
	}

	requestedFriendIDs := make([]string, len(requestedFriends))
	for i, requestedFriend := range requestedFriends {
		requestedFriendIDs[i] = requestedFriend.RequestedUserID
	}

	var suggestions []*model.User
	if err := r.DB.Not("id", append(friendIDs, requestedFriendIDs...)).Not("id", user.ID).Find(&suggestions).Error; err != nil {
		return nil, err
	}

	var friendRequests []*model.FriendRequest
	if err := r.DB.Where("requested_user_id = ?", user.ID).Find(&friendRequests).Error; err != nil {
		return nil, err
	}

	friendRequestUserIDs := make([]string, len(friendRequests))
	for i, friendRequest := range friendRequests {
		friendRequestUserIDs[i] = friendRequest.UserID
	}

	finalSuggestions := []*model.User{}
	for _, suggestion := range suggestions {
		if !containsString(friendRequestUserIDs, suggestion.ID) {
			finalSuggestions = append(finalSuggestions, suggestion)
		}
	}
	return finalSuggestions, nil
}

// GetUserFriendSuggestions is the resolver for the getUserFriendSuggestions field.
func (r *queryResolver) GetUserFriendSuggestions(ctx context.Context, userID string) ([]*model.User, error) {
	var friends []*model.Friend
	if err := r.DB.Where("user_id = ?", userID).Find(&friends).Error; err != nil {
		return nil, err
	}

	friendIDs := make([]string, len(friends))
	for i, friend := range friends {
		friendIDs[i] = friend.FriendID
	}

	var requestedFriends []*model.FriendRequest
	if err := r.DB.Where("user_id = ?", userID).Find(&requestedFriends).Error; err != nil {
		return nil, err
	}

	requestedFriendIDs := make([]string, len(requestedFriends))
	for i, requestedFriend := range requestedFriends {
		requestedFriendIDs[i] = requestedFriend.RequestedUserID
	}

	var suggestions []*model.User
	if err := r.DB.Not("id", append(friendIDs, requestedFriendIDs...)).Not("id", userID).Find(&suggestions).Error; err != nil {
		return nil, err
	}

	var friendRequests []*model.FriendRequest
	if err := r.DB.Where("requested_user_id = ?", userID).Find(&friendRequests).Error; err != nil {
		return nil, err
	}

	friendRequestUserIDs := make([]string, len(friendRequests))
	for i, friendRequest := range friendRequests {
		friendRequestUserIDs[i] = friendRequest.UserID
	}

	finalSuggestions := []*model.User{}
	for _, suggestion := range suggestions {
		if !containsString(friendRequestUserIDs, suggestion.ID) {
			finalSuggestions = append(finalSuggestions, suggestion)
		}
	}
	return finalSuggestions, nil
}

// GetUserMutuals is the resolver for the getUserMutuals field.
func (r *queryResolver) GetUserMutuals(ctx context.Context, token string, userID string) (int, error) {
	user, err := r.GetUserByToken(ctx, token)
	if err != nil {
		return 0, err
	}

	var userFriends []*model.Friend
	if err := r.DB.Where("user_id = ?", user.ID).Find(&userFriends).Error; err != nil {
		return 0, err
	}

	var suggestedUserFriends []*model.Friend
	if err := r.DB.Where("user_id = ?", userID).Find(&suggestedUserFriends).Error; err != nil {
		return 0, err
	}

	mutualFriendsCount := 0
	for _, suggestedFriend := range suggestedUserFriends {
		for _, userFriend := range userFriends {
			if suggestedFriend.FriendID == userFriend.FriendID {
				mutualFriendsCount++
				break
			}
		}
	}
	return mutualFriendsCount, nil
}

// Friend returns FriendResolver implementation.
func (r *Resolver) Friend() FriendResolver { return &friendResolver{r} }

// FriendRequest returns FriendRequestResolver implementation.
func (r *Resolver) FriendRequest() FriendRequestResolver { return &friendRequestResolver{r} }

type friendResolver struct{ *Resolver }
type friendRequestResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func containsString(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
