package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// Creator is the resolver for the creator field.
func (r *groupResolver) Creator(ctx context.Context, obj *model.Group) (*model.User, error) {
	creator := &model.User{}
	if err := r.DB.Where("id = ?", obj.CreatorID).First(creator).Error; err != nil {
		return nil, err
	}
	return creator, nil
}

// Group is the resolver for the group field.
func (r *groupProfileResolver) Group(ctx context.Context, obj *model.GroupProfile) (*model.Group, error) {
	group := &model.Group{}
	if err := r.DB.Where("id = ?", obj.GroupID).First(group).Error; err != nil {
		return nil, err
	}
	return group, nil
}

// User is the resolver for the user field.
func (r *memberResolver) User(ctx context.Context, obj *model.Member) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Group is the resolver for the group field.
func (r *memberResolver) Group(ctx context.Context, obj *model.Member) (*model.Group, error) {
	group := &model.Group{}
	if err := r.DB.Where("id = ?", obj.GroupID).First(group).Error; err != nil {
		return nil, err
	}
	return group, nil
}

// User is the resolver for the user field.
func (r *memberInviteResolver) User(ctx context.Context, obj *model.MemberInvite) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Sender is the resolver for the sender field.
func (r *memberInviteResolver) Sender(ctx context.Context, obj *model.MemberInvite) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.SenderID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Group is the resolver for the group field.
func (r *memberInviteResolver) Group(ctx context.Context, obj *model.MemberInvite) (*model.Group, error) {
	group := &model.Group{}
	if err := r.DB.Where("id = ?", obj.GroupID).First(group).Error; err != nil {
		return nil, err
	}
	return group, nil
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, inputGroup model.NewGroup) (*model.Group, error) {
	group := &model.Group{
		ID:          uuid.NewString(),
		CreatorID:   inputGroup.CreatorID,
		Name:        inputGroup.Name,
		Description: inputGroup.Description,
		CreatedAt:   time.Now().Format("2006-01-02 15:04:05"),
		Status:      inputGroup.Status,
	}
	return group, r.DB.Save(&group).Error
}

// CreateGroupProfile is the resolver for the createGroupProfile field.
func (r *mutationResolver) CreateGroupProfile(ctx context.Context, groupID string, imageLink string) (*model.GroupProfile, error) {
	groupProfile := &model.GroupProfile{
		ID:        uuid.NewString(),
		GroupID:   groupID,
		ImageLink: imageLink,
	}
	return groupProfile, r.DB.Save(&groupProfile).Error
}

// CreateMember is the resolver for the createMember field.
func (r *mutationResolver) CreateMember(ctx context.Context, userID string, groupID string, role string) (*model.Member, error) {
	member := &model.Member{
		ID:       uuid.NewString(),
		UserID:   userID,
		GroupID:  groupID,
		Role:     role,
		JoinedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	return member, r.DB.Save(&member).Error
}

// CreateMemberRequest is the resolver for the createMemberRequest field.
func (r *mutationResolver) CreateMemberRequest(ctx context.Context, userID string, groupID string) (*model.RequestedMember, error) {
	memberRequest := &model.RequestedMember{
		ID:      uuid.NewString(),
		UserID:  userID,
		GroupID: groupID,
	}
	return memberRequest, r.DB.Save(&memberRequest).Error
}

// CreateGroupInvite is the resolver for the createGroupInvite field.
func (r *mutationResolver) CreateGroupInvite(ctx context.Context, userID string, senderID string, groupID string) (*model.MemberInvite, error) {
	invite := &model.MemberInvite{
		ID:       uuid.NewString(),
		UserID:   userID,
		SenderID: senderID,
		GroupID:  groupID,
	}
	return invite, r.DB.Save(&invite).Error
}

// DeleteGroupInvite is the resolver for the deleteGroupInvite field.
func (r *mutationResolver) DeleteGroupInvite(ctx context.Context, id string) (bool, error) {
	res := r.DB.Delete(&model.MemberInvite{}, "id = ?", id)
	if res.Error != nil {
		return false, res.Error
	}
	return true, nil
}

// GetGroups is the resolver for the getGroups field.
func (r *queryResolver) GetGroups(ctx context.Context) ([]*model.Group, error) {
	var groups []*model.Group
	return groups, r.DB.Find(&groups).Error
}

// GetGroupProfiles is the resolver for the getGroupProfiles field.
func (r *queryResolver) GetGroupProfiles(ctx context.Context) ([]*model.GroupProfile, error) {
	var groupProfile []*model.GroupProfile
	err := r.DB.Preload("Group").Find(&groupProfile).Error
    if err != nil {
        return nil, err
    }
    return groupProfile, nil
}

// GetRequestedMembers is the resolver for the getRequestedMembers field.
func (r *queryResolver) GetRequestedMembers(ctx context.Context, groupID string) ([]*model.RequestedMember, error) {
	requests := []*model.RequestedMember{}
	if err := r.DB.Where("group_id = ?", groupID).Find(&requests).Error; err != nil {
		return nil, err
	}
	return requests, nil
}

// GetUserGroups is the resolver for the getUserGroups field.
func (r *queryResolver) GetUserGroups(ctx context.Context, userID string) ([]*model.Group, error) {
	var userGroups []*model.Group

	query := `
        SELECT groups.* FROM groups
        JOIN members ON groups.id = members.group_id
        WHERE members.user_id = ?
    `

	err := r.DB.Raw(query, userID).Scan(&userGroups).Error
	if err != nil {
		return nil, err
	}

	return userGroups, nil
}

// GetGroup is the resolver for the getGroup field.
func (r *queryResolver) GetGroup(ctx context.Context, id string) (*model.Group, error) {
	var group *model.Group
	return group, r.DB.First(&group, "id = ?", id).Error
}

// GetGroupMembers is the resolver for the getGroupMembers field.
func (r *queryResolver) GetGroupMembers(ctx context.Context, groupID string) ([]*model.Member, error) {
	members := []*model.Member{}
	if err := r.DB.Where("group_id = ?", groupID).Find(&members).Error; err != nil {
		return nil, err
	}
	return members, nil
}

// SearchGroup is the resolver for the searchGroup field.
func (r *queryResolver) SearchGroup(ctx context.Context, query string) ([]*model.Group, error) {
	var groups []*model.Group

	err := r.DB.Where("name ILIKE ?", "%"+query+"%").Find(&groups).Error
	if err != nil {
		return nil, err
	}
	return groups, nil
}

// GetMemberInvites is the resolver for the getMemberInvites field.
func (r *queryResolver) GetMemberInvites(ctx context.Context) ([]*model.MemberInvite, error) {
	members := []*model.MemberInvite{}
	if err := r.DB.Find(&members).Error; err != nil {
		return nil, err
	}
	return members, nil
}

// User is the resolver for the user field.
func (r *requestedMemberResolver) User(ctx context.Context, obj *model.RequestedMember) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Group is the resolver for the group field.
func (r *requestedMemberResolver) Group(ctx context.Context, obj *model.RequestedMember) (*model.Group, error) {
	group := &model.Group{}
	if err := r.DB.Where("id = ?", obj.GroupID).First(group).Error; err != nil {
		return nil, err
	}
	return group, nil
}

// Group returns GroupResolver implementation.
func (r *Resolver) Group() GroupResolver { return &groupResolver{r} }

// GroupProfile returns GroupProfileResolver implementation.
func (r *Resolver) GroupProfile() GroupProfileResolver { return &groupProfileResolver{r} }

// Member returns MemberResolver implementation.
func (r *Resolver) Member() MemberResolver { return &memberResolver{r} }

// MemberInvite returns MemberInviteResolver implementation.
func (r *Resolver) MemberInvite() MemberInviteResolver { return &memberInviteResolver{r} }

// RequestedMember returns RequestedMemberResolver implementation.
func (r *Resolver) RequestedMember() RequestedMemberResolver { return &requestedMemberResolver{r} }

type groupResolver struct{ *Resolver }
type groupProfileResolver struct{ *Resolver }
type memberResolver struct{ *Resolver }
type memberInviteResolver struct{ *Resolver }
type requestedMemberResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *requestedMemberResolver) Sender(ctx context.Context, obj *model.RequestedMember) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Sender - sender"))
}
