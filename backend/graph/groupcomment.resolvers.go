package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *groupCommentLikeResolver) User(ctx context.Context, obj *model.GroupCommentLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// GroupComment is the resolver for the groupComment field.
func (r *groupCommentLikeResolver) GroupComment(ctx context.Context, obj *model.GroupCommentLike) (*model.GroupPostComment, error) {
	comment := &model.GroupPostComment{}
	if err := r.DB.Where("id = ?", obj.GroupCommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// User is the resolver for the user field.
func (r *groupCommentReplyResolver) User(ctx context.Context, obj *model.GroupCommentReply) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// GroupComment is the resolver for the groupComment field.
func (r *groupCommentReplyResolver) GroupComment(ctx context.Context, obj *model.GroupCommentReply) (*model.GroupPostComment, error) {
	comment := &model.GroupPostComment{}
	if err := r.DB.Where("id = ?", obj.GroupCommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// CreateGroupCommentLike is the resolver for the createGroupCommentLike field.
func (r *mutationResolver) CreateGroupCommentLike(ctx context.Context, userID string, groupCommentID string) (*model.GroupCommentLike, error) {
	like := &model.GroupCommentLike{
		ID:             uuid.NewString(),
		UserID:         userID,
		GroupCommentID: groupCommentID,
	}
	tx := r.DB.Begin()

	var postComment *model.GroupPostComment
	if err := tx.First(&postComment, "id = ?", groupCommentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	postComment.Likes = postComment.Likes + 1

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateGroupCommentReply is the resolver for the createGroupCommentReply field.
func (r *mutationResolver) CreateGroupCommentReply(ctx context.Context, userID string, groupCommentID string, reply string) (*model.GroupCommentReply, error) {
	replies := &model.GroupCommentReply{
		ID:             uuid.NewString(),
		UserID:         userID,
		GroupCommentID: groupCommentID,
		Reply:          reply,
		CreatedAt:      time.Now().Format("2006-01-02 15:04:05"),
		Likes:          0,
	}
	tx := r.DB.Begin()

	var postComment *model.GroupPostComment
	if err := tx.First(&postComment, "id = ?", groupCommentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	postComment.Replies = postComment.Replies + 1

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&replies).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return replies, nil
}

// DeleteGroupCommentLike is the resolver for the deleteGroupCommentLike field.
func (r *mutationResolver) DeleteGroupCommentLike(ctx context.Context, userID string, groupCommentID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.GroupCommentLike{}, "user_id = ? AND group_comment_id = ?", userID, groupCommentID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var comment *model.GroupPostComment
	if err := tx.First(&comment, "id = ?", groupCommentID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	comment.Likes = comment.Likes - 1
	if err := tx.Save(&comment).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// DeleteGroupCommentReply is the resolver for the deleteGroupCommentReply field.
func (r *mutationResolver) DeleteGroupCommentReply(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroupCommentReply - deleteGroupCommentReply"))
}

// GetGroupCommentReplies is the resolver for the getGroupCommentReplies field.
func (r *queryResolver) GetGroupCommentReplies(ctx context.Context, groupCommentID string) ([]*model.GroupCommentReply, error) {
	replies := []*model.GroupCommentReply{}
	if err := r.DB.Where("group_comment_id = ?", groupCommentID).Find(&replies).Error; err != nil {
		return nil, err
	}
	return replies, nil
}

// GetLikedGroupComments is the resolver for the getLikedGroupComments field.
func (r *queryResolver) GetLikedGroupComments(ctx context.Context, token string) ([]*model.GroupCommentLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	comments := []*model.GroupCommentLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// GroupCommentLike returns GroupCommentLikeResolver implementation.
func (r *Resolver) GroupCommentLike() GroupCommentLikeResolver { return &groupCommentLikeResolver{r} }

// GroupCommentReply returns GroupCommentReplyResolver implementation.
func (r *Resolver) GroupCommentReply() GroupCommentReplyResolver {
	return &groupCommentReplyResolver{r}
}

type groupCommentLikeResolver struct{ *Resolver }
type groupCommentReplyResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *groupCommentLikeResolver) Comment(ctx context.Context, obj *model.GroupCommentLike) (*model.GroupPostComment, error) {
	comment := &model.GroupPostComment{}
	if err := r.DB.Where("id = ?", obj.GroupCommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}
func (r *groupCommentReplyResolver) Comment(ctx context.Context, obj *model.GroupCommentReply) (*model.GroupPostComment, error) {
	comment := &model.GroupPostComment{}
	if err := r.DB.Where("id = ?", obj.GroupCommentID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}
