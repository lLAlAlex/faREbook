package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// Group is the resolver for the group field.
func (r *groupPostResolver) Group(ctx context.Context, obj *model.GroupPost) (*model.Group, error) {
	group := &model.Group{}
	if err := r.DB.Where("id = ?", obj.GroupID).First(group).Error; err != nil {
		return nil, err
	}
	return group, nil
}

// User is the resolver for the user field.
func (r *groupPostResolver) User(ctx context.Context, obj *model.GroupPost) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *groupPostCommentResolver) User(ctx context.Context, obj *model.GroupPostComment) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// GroupPost is the resolver for the groupPost field.
func (r *groupPostCommentResolver) GroupPost(ctx context.Context, obj *model.GroupPostComment) (*model.GroupPost, error) {
	groupPost := &model.GroupPost{}
	if err := r.DB.Where("id = ?", obj.GroupPostID).First(groupPost).Error; err != nil {
		return nil, err
	}
	return groupPost, nil
}

// User is the resolver for the user field.
func (r *groupPostLikeResolver) User(ctx context.Context, obj *model.GroupPostLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// GroupPost is the resolver for the groupPost field.
func (r *groupPostLikeResolver) GroupPost(ctx context.Context, obj *model.GroupPostLike) (*model.GroupPost, error) {
	groupPost := &model.GroupPost{}
	if err := r.DB.Where("id = ?", obj.GroupPostID).First(groupPost).Error; err != nil {
		return nil, err
	}
	return groupPost, nil
}

// GroupPost is the resolver for the groupPost field.
func (r *groupPostMediaResolver) GroupPost(ctx context.Context, obj *model.GroupPostMedia) (*model.GroupPost, error) {
	groupPost := &model.GroupPost{}
	if err := r.DB.Where("id = ?", obj.GroupPostID).First(groupPost).Error; err != nil {
		return nil, err
	}
	return groupPost, nil
}

// CreateGroupPost is the resolver for the createGroupPost field.
func (r *mutationResolver) CreateGroupPost(ctx context.Context, inputGroupPost model.NewGroupPost) (*model.GroupPost, error) {
	post := &model.GroupPost{
		ID:        uuid.NewString(),
		GroupID:   inputGroupPost.GroupID,
		UserID:    inputGroupPost.UserID,
		Content:   inputGroupPost.Content,
		Privacy:   inputGroupPost.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
		Comments:  0,
	}
	return post, r.DB.Save(&post).Error
}

// CreateGroupLike is the resolver for the createGroupLike field.
func (r *mutationResolver) CreateGroupLike(ctx context.Context, userID string, groupPostID string) (*model.GroupPostLike, error) {
	like := &model.GroupPostLike{
		ID:          uuid.NewString(),
		UserID:      userID,
		GroupPostID: groupPostID,
	}
	tx := r.DB.Begin()

	var post *model.GroupPost
	if err := tx.First(&post, "id = ?", groupPostID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	post.Likes = post.Likes + 1

	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateGroupComment is the resolver for the createGroupComment field.
func (r *mutationResolver) CreateGroupComment(ctx context.Context, userID string, groupPostID string, comment string) (*model.GroupPostComment, error) {
	postComment := &model.GroupPostComment{
		ID:          uuid.NewString(),
		UserID:      userID,
		GroupPostID: groupPostID,
		Comment:     comment,
		CreatedAt:   time.Now().Format("2006-01-02 15:04:05"),
		Likes:       0,
		Replies:     0,
	}
	tx := r.DB.Begin()

	var post *model.GroupPost
	if err := tx.First(&post, "id = ?", groupPostID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	post.Comments = post.Comments + 1

	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return postComment, nil
}

// DeleteGroupPost is the resolver for the deleteGroupPost field.
func (r *mutationResolver) DeleteGroupPost(ctx context.Context, id string) (bool, error) {
	res := r.DB.Delete(&model.GroupPost{}, "id = ?", id)
	if res.Error != nil {
		return false, res.Error
	}
	return true, nil
}

// DeleteGroupLike is the resolver for the deleteGroupLike field.
func (r *mutationResolver) DeleteGroupLike(ctx context.Context, userID string, groupPostID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.GroupPostLike{}, "user_id = ? AND group_post_id = ?", userID, groupPostID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var post *model.GroupPost
	if err := tx.First(&post, "id = ?", groupPostID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	post.Likes = post.Likes - 1
	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// DeleteGroupComment is the resolver for the deleteGroupComment field.
func (r *mutationResolver) DeleteGroupComment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroupComment - deleteGroupComment"))
}

// CreateGroupPostMedia is the resolver for the createGroupPostMedia field.
func (r *mutationResolver) CreateGroupPostMedia(ctx context.Context, groupPostID string, mediaLink string) (*model.GroupPostMedia, error) {
	postMedia := &model.GroupPostMedia{
		ID:          uuid.NewString(),
		GroupPostID: groupPostID,
		MediaLink:   mediaLink,
	}
	return postMedia, r.DB.Save(&postMedia).Error
}

// GetGroupPosts is the resolver for the getGroupPosts field.
func (r *queryResolver) GetGroupPosts(ctx context.Context, groupID string, limit *int, offset *int) ([]*model.GroupPost, error) {
	posts := []*model.GroupPost{}
	if err := r.DB.Where("group_id = ?", groupID).Order("created_at DESC").Limit(*limit).Offset(*offset).Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetLikedGroupPosts is the resolver for the getLikedGroupPosts field.
func (r *queryResolver) GetLikedGroupPosts(ctx context.Context, token string) ([]*model.GroupPostLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	posts := []*model.GroupPostLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetGroupPostComments is the resolver for the getGroupPostComments field.
func (r *queryResolver) GetGroupPostComments(ctx context.Context, groupPostID string) ([]*model.GroupPostComment, error) {
	comments := []*model.GroupPostComment{}
	if err := r.DB.Where("group_post_id = ?", groupPostID).Order("created_at DESC").Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// GetGroupPostMedias is the resolver for the getGroupPostMedias field.
func (r *queryResolver) GetGroupPostMedias(ctx context.Context) ([]*model.GroupPostMedia, error) {
	medias := []*model.GroupPostMedia{}
	if err := r.DB.Find(&medias).Error; err != nil {
		return nil, err
	}
	return medias, nil
}

// GroupPost returns GroupPostResolver implementation.
func (r *Resolver) GroupPost() GroupPostResolver { return &groupPostResolver{r} }

// GroupPostComment returns GroupPostCommentResolver implementation.
func (r *Resolver) GroupPostComment() GroupPostCommentResolver { return &groupPostCommentResolver{r} }

// GroupPostLike returns GroupPostLikeResolver implementation.
func (r *Resolver) GroupPostLike() GroupPostLikeResolver { return &groupPostLikeResolver{r} }

// GroupPostMedia returns GroupPostMediaResolver implementation.
func (r *Resolver) GroupPostMedia() GroupPostMediaResolver { return &groupPostMediaResolver{r} }

type groupPostResolver struct{ *Resolver }
type groupPostCommentResolver struct{ *Resolver }
type groupPostLikeResolver struct{ *Resolver }
type groupPostMediaResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *groupPostCommentResolver) Post(ctx context.Context, obj *model.GroupPostComment) (*model.GroupPost, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}
func (r *groupPostLikeResolver) Post(ctx context.Context, obj *model.GroupPostLike) (*model.GroupPost, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}
func (r *groupPostMediaResolver) Post(ctx context.Context, obj *model.GroupPostMedia) (*model.GroupPost, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}
