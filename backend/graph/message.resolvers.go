package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *conversationResolver) User(ctx context.Context, obj *model.Conversation) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User2 is the resolver for the user2 field.
func (r *conversationResolver) User2(ctx context.Context, obj *model.Conversation) (*model.User, error) {
	user2 := &model.User{}
	if err := r.DB.Where("id = ?", obj.User2id).First(user2).Error; err != nil {
		return nil, err
	}
	return user2, nil
}

// Conversation is the resolver for the conversation field.
func (r *messageResolver) Conversation(ctx context.Context, obj *model.Message) (*model.Conversation, error) {
	conversation := &model.Conversation{}
	if err := r.DB.Where("id = ?", obj.ConversationID).First(conversation).Error; err != nil {
		return nil, err
	}
	return conversation, nil
}

// User is the resolver for the user field.
func (r *messageResolver) User(ctx context.Context, obj *model.Message) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Message is the resolver for the message field.
func (r *messageMediaResolver) Message(ctx context.Context, obj *model.MessageMedia) (*model.Message, error) {
	message := &model.Message{}
	if err := r.DB.Where("id = ?", obj.MessageID).First(message).Error; err != nil {
		return nil, err
	}
	return message, nil
}

// CreateConversation is the resolver for the createConversation field.
func (r *mutationResolver) CreateConversation(ctx context.Context, newConversation model.NewConversation) (*model.Conversation, error) {
	conversation := &model.Conversation{
		ID:        uuid.NewString(),
		UserID:    newConversation.UserID,
		User2id:   newConversation.User2id,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	if err := r.DB.Create(conversation).Error; err != nil {
		return nil, err
	}

	reverseConversation := &model.Conversation{
		ID:        uuid.NewString(),
		UserID:    newConversation.User2id,
		User2id:   newConversation.UserID,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	if err := r.DB.Create(reverseConversation).Error; err != nil {
		return nil, err
	}

	return conversation, nil
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, newMessage model.NewMessage) (*model.Message, error) {
	message := &model.Message{
		ID:             uuid.NewString(),
		ConversationID: newMessage.ConversationID,
		UserID:         newMessage.UserID,
		Content:        newMessage.Content,
		HasMedia:       newMessage.HasMedia,
		CreatedAt:      time.Now().Format("2006-01-02 15:04:05"),
	}
	if err := r.DB.Save(&message).Error; err != nil {
		return message, err
	}
	for _, conn := range r.Conns {
		fmt.Println(conn)
		err := conn.WriteJSON(&message)
		if err != nil {
			fmt.Println(err)
		}
	}
	return message, nil
}

// CreateMessageMedia is the resolver for the createMessageMedia field.
func (r *mutationResolver) CreateMessageMedia(ctx context.Context, messageID string, mediaLink string) (*model.MessageMedia, error) {
	msgMedia := &model.MessageMedia{
		ID:        uuid.NewString(),
		MessageID: messageID,
		MediaLink: mediaLink,
	}
	return msgMedia, r.DB.Save(&msgMedia).Error
}

// GetUserConversation is the resolver for the getUserConversation field.
func (r *queryResolver) GetUserConversation(ctx context.Context, userID string) ([]*model.Conversation, error) {
	conversations := []*model.Conversation{}
	if err := r.DB.Where("user_id = ? OR user2id = ?", userID, userID).Find(&conversations).Error; err != nil {
		return nil, err
	}
	return conversations, nil
}

// GetConversationMessage is the resolver for the getConversationMessage field.
func (r *queryResolver) GetConversationMessage(ctx context.Context, conversationID string) ([]*model.Message, error) {
	messages := []*model.Message{}
	if err := r.DB.Where("conversation_id = ?", conversationID).Order("created_at ASC").Find(&messages).Error; err != nil {
		return nil, err
	}
	return messages, nil
}

// GetMessageMedias is the resolver for the getMessageMedias field.
func (r *queryResolver) GetMessageMedias(ctx context.Context) ([]*model.MessageMedia, error) {
	var msgMedias []*model.MessageMedia
	return msgMedias, r.DB.Find(&msgMedias).Error
}

// SearchConversation is the resolver for the searchConversation field.
func (r *queryResolver) SearchConversation(ctx context.Context, query string) ([]*model.Conversation, error) {
	var conversations []*model.Conversation

	err := r.DB.
		Joins("JOIN users AS user2 ON conversations.user2id = user2.id").
		Where("user2.name LIKE ?", "%"+query+"%").
		Find(&conversations).
		Error

	if err != nil {
		return nil, err
	}
	return conversations, nil
}

// Conversation returns ConversationResolver implementation.
func (r *Resolver) Conversation() ConversationResolver { return &conversationResolver{r} }

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

// MessageMedia returns MessageMediaResolver implementation.
func (r *Resolver) MessageMedia() MessageMediaResolver { return &messageMediaResolver{r} }

type conversationResolver struct{ *Resolver }
type messageResolver struct{ *Resolver }
type messageMediaResolver struct{ *Resolver }
