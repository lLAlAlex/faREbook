package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, newNotification model.NewNotification) (*model.Notification, error) {
	notification := &model.Notification{
		ID:        uuid.NewString(),
		UserID:    newNotification.UserID,
		SenderID:  newNotification.SenderID,
		Content:   newNotification.Content,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	return notification, r.DB.Save(&notification).Error
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteNotification - deleteNotification"))
}

// User is the resolver for the user field.
func (r *notificationResolver) User(ctx context.Context, obj *model.Notification) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Sender is the resolver for the sender field.
func (r *notificationResolver) Sender(ctx context.Context, obj *model.Notification) (*model.User, error) {
	sender := &model.User{}
	if err := r.DB.Where("id = ?", obj.SenderID).First(sender).Error; err != nil {
		return nil, err
	}
	return sender, nil
}

// GetUserNotifications is the resolver for the getUserNotifications field.
func (r *queryResolver) GetUserNotifications(ctx context.Context, token string) ([]*model.Notification, error) {
	user, err := r.GetUserByToken(ctx, token)
	if err != nil {
		return nil, err
	}

	notifications := []*model.Notification{}
	if err := r.DB.Where("user_id = ?", user.ID).Order("created_at DESC").Find(&notifications).Error; err != nil {
		return nil, err
	}

	var friends []*model.Friend
	if err := r.DB.Where("user_id = ?", user.ID).Find(&friends).Error; err != nil {
		return nil, err
	}

	friendIDs := make([]string, len(friends))
	for i, friend := range friends {
		friendIDs[i] = friend.FriendID
	}

	friendNotifications := []*model.Notification{}
	if err := r.DB.Where("user_id IN ?", friendIDs).Order("created_at DESC").Find(&friendNotifications).Error; err != nil {
		return nil, err
	}
	allNotifications := append(notifications, friendNotifications...)

	return allNotifications, nil
}

// Notification returns NotificationResolver implementation.
func (r *Resolver) Notification() NotificationResolver { return &notificationResolver{r} }

type notificationResolver struct{ *Resolver }
