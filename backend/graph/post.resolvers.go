package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost model.NewPost) (*model.Post, error) {
	post := &model.Post{
		ID:        uuid.NewString(),
		UserID:    inputPost.UserID,
		Content:   inputPost.Content,
		Privacy:   inputPost.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
		Comments:  0,
	}
	return post, r.DB.Save(&post).Error
}

// CreateLike is the resolver for the createLike field.
func (r *mutationResolver) CreateLike(ctx context.Context, userID string, postID string) (*model.PostLike, error) {
	like := &model.PostLike{
		ID:     uuid.NewString(),
		UserID: userID,
		PostID: postID,
	}
	tx := r.DB.Begin()

	var post *model.Post
	if err := tx.First(&post, "id = ?", postID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	post.Likes = post.Likes + 1

	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, userID string, postID string, comment string) (*model.PostComment, error) {
	postComment := &model.PostComment{
		ID:        uuid.NewString(),
		UserID:    userID,
		PostID:    postID,
		Comment:   comment,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
		Replies:   0,
	}
	tx := r.DB.Begin()

	var post *model.Post
	if err := tx.First(&post, "id = ?", postID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	post.Comments = post.Comments + 1

	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&postComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return postComment, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	res := r.DB.Delete(&model.Post{}, "id = ?", id)
	if res.Error != nil {
		return false, res.Error
	}
	return true, nil
}

// DeleteLike is the resolver for the deleteLike field.
func (r *mutationResolver) DeleteLike(ctx context.Context, userID string, postID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.PostLike{}, "user_id = ? AND post_id = ?", userID, postID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var post *model.Post
	if err := tx.First(&post, "id = ?", postID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	post.Likes = post.Likes - 1
	if err := tx.Save(&post).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// CreatePostImage is the resolver for the createPostImage field.
func (r *mutationResolver) CreatePostImage(ctx context.Context, postID string, imageLink string) (*model.PostImage, error) {
	postImage := &model.PostImage{
		ID:        uuid.NewString(),
		PostID:    postID,
		ImageLink: imageLink,
	}
	return postImage, r.DB.Save(&postImage).Error
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *postCommentResolver) User(ctx context.Context, obj *model.PostComment) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Post is the resolver for the post field.
func (r *postCommentResolver) Post(ctx context.Context, obj *model.PostComment) (*model.Post, error) {
	post := &model.Post{}
	if err := r.DB.Where("id = ?", obj.PostID).First(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// Post is the resolver for the post field.
func (r *postImageResolver) Post(ctx context.Context, obj *model.PostImage) (*model.Post, error) {
	post := &model.Post{}
	if err := r.DB.Where("id = ?", obj.PostID).First(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// User is the resolver for the user field.
func (r *postLikeResolver) User(ctx context.Context, obj *model.PostLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Post is the resolver for the post field.
func (r *postLikeResolver) Post(ctx context.Context, obj *model.PostLike) (*model.Post, error) {
	post := &model.Post{}
	if err := r.DB.Where("id = ?", obj.PostID).First(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// User is the resolver for the user field.
func (r *postTagResolver) User(ctx context.Context, obj *model.PostTag) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Post is the resolver for the post field.
func (r *postTagResolver) Post(ctx context.Context, obj *model.PostTag) (*model.Post, error) {
	post := &model.Post{}
	if err := r.DB.Where("id = ?", obj.PostID).First(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// Post is the resolver for the post field.
func (r *postVideoResolver) Post(ctx context.Context, obj *model.PostVideo) (*model.Post, error) {
	post := &model.Post{}
	
	if err := r.DB.Where("id = ?", obj.PostID).First(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// GetOwnPost is the resolver for the getOwnPost field.
func (r *queryResolver) GetOwnPost(ctx context.Context, token string) ([]*model.Post, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	posts := []*model.Post{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetUserPosts is the resolver for the getUserPosts field.
func (r *queryResolver) GetUserPosts(ctx context.Context, userID string) ([]*model.Post, error) {
	posts := []*model.Post{}
	if err := r.DB.Where("user_id = ?", userID).Order("created_at DESC").Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	posts := []*model.Post{}
	if err := r.DB.Order("created_at DESC").Limit(*limit).Offset(*offset).Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetLikedPost is the resolver for the getLikedPost field.
func (r *queryResolver) GetLikedPost(ctx context.Context, token string) ([]*model.PostLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	posts := []*model.PostLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// GetAllPostComments is the resolver for the getAllPostComments field.
func (r *queryResolver) GetAllPostComments(ctx context.Context, postID string) ([]*model.PostComment, error) {
	comments := []*model.PostComment{}
	if err := r.DB.Where("post_id = ?", postID).Order("created_at DESC").Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// GetPostLike is the resolver for the getPostLike field.
func (r *queryResolver) GetPostLike(ctx context.Context, postID string) (int, error) {
	posts := []*model.PostLike{}
	if err := r.DB.Where("post_id = ?", postID).Find(&posts).Error; err != nil {
		return 0, err
	}
	count := len(posts)
	return count, nil
}

// GetPostImages is the resolver for the getPostImages field.
func (r *queryResolver) GetPostImages(ctx context.Context, postID string) ([]*model.PostImage, error) {
	images := []*model.PostImage{}
	if err := r.DB.Where("post_id = ?", postID).Find(&images).Error; err != nil {
		return nil, err
	}
	return images, nil
}

// GetAllPostImages is the resolver for the getAllPostImages field.
func (r *queryResolver) GetAllPostImages(ctx context.Context) ([]*model.PostImage, error) {
	images := []*model.PostImage{}
	if err := r.DB.Find(&images).Error; err != nil {
		return nil, err
	}
	return images, nil
}

// SearchPost is the resolver for the searchPost field.
func (r *queryResolver) SearchPost(ctx context.Context, query string) ([]*model.Post, error) {
	var posts []*model.Post

	err := r.DB.Where("content LIKE ?", "%"+query+"%").Order("created_at DESC").Find(&posts).Error
	if err != nil {
		return nil, err
	}
	return posts, nil
}

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// PostComment returns PostCommentResolver implementation.
func (r *Resolver) PostComment() PostCommentResolver { return &postCommentResolver{r} }

// PostImage returns PostImageResolver implementation.
func (r *Resolver) PostImage() PostImageResolver { return &postImageResolver{r} }

// PostLike returns PostLikeResolver implementation.
func (r *Resolver) PostLike() PostLikeResolver { return &postLikeResolver{r} }

// PostTag returns PostTagResolver implementation.
func (r *Resolver) PostTag() PostTagResolver { return &postTagResolver{r} }

// PostVideo returns PostVideoResolver implementation.
func (r *Resolver) PostVideo() PostVideoResolver { return &postVideoResolver{r} }

type postResolver struct{ *Resolver }
type postCommentResolver struct{ *Resolver }
type postImageResolver struct{ *Resolver }
type postLikeResolver struct{ *Resolver }
type postTagResolver struct{ *Resolver }
type postVideoResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *postCommentResolver) CreatedAt(ctx context.Context, obj *model.PostComment) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}
func (r *postResolver) Likes(ctx context.Context, obj *model.Post) (int, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}
func (r *postResolver) Comments(ctx context.Context, obj *model.Post) (int, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}
