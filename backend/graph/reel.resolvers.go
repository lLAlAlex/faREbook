package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// CreateReel is the resolver for the createReel field.
func (r *mutationResolver) CreateReel(ctx context.Context, newReel model.NewReel) (*model.Reel, error) {
	reel := &model.Reel{
		ID:        uuid.NewString(),
		UserID:    newReel.UserID,
		Title:     newReel.Title,
		Privacy:   newReel.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     newReel.Likes,
		Comments:  newReel.Comments,
	}
	return reel, r.DB.Save(&reel).Error
}

// CreateReelVideo is the resolver for the createReelVideo field.
func (r *mutationResolver) CreateReelVideo(ctx context.Context, reelID string, videoLink string) (*model.ReelVideo, error) {
	reelVideo := &model.ReelVideo{
		ID:        uuid.NewString(),
		ReelID:    reelID,
		VideoLink: videoLink,
	}
	return reelVideo, r.DB.Save(&reelVideo).Error
}

// CreateReelLike is the resolver for the createReelLike field.
func (r *mutationResolver) CreateReelLike(ctx context.Context, userID string, reelID string) (*model.ReelLike, error) {
	like := &model.ReelLike{
		ID:     uuid.NewString(),
		UserID: userID,
		ReelID: reelID,
	}
	tx := r.DB.Begin()

	var reel *model.Reel
	if err := tx.First(&reel, "id = ?", reelID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	reel.Likes = reel.Likes + 1

	if err := tx.Save(&reel).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateReelComment is the resolver for the createReelComment field.
func (r *mutationResolver) CreateReelComment(ctx context.Context, userID string, reelID string, comment string) (*model.ReelComment, error) {
	reelComment := &model.ReelComment{
		ID:        uuid.NewString(),
		UserID:    userID,
		ReelID:    reelID,
		Comment:   comment,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
		Replies:   0,
	}
	tx := r.DB.Begin()

	var reel *model.Reel
	if err := tx.First(&reel, "id = ?", reelID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	reel.Comments = reel.Comments + 1

	if err := tx.Save(&reel).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&reelComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return reelComment, nil
}

// DeleteReelLike is the resolver for the deleteReelLike field.
func (r *mutationResolver) DeleteReelLike(ctx context.Context, userID string, reelID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.ReelLike{}, "user_id = ? AND reel_id = ?", userID, reelID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var reel *model.Reel
	if err := tx.First(&reel, "id = ?", reelID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	reel.Likes = reel.Likes - 1
	if err := tx.Save(&reel).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// CreateReelCommentLike is the resolver for the createReelCommentLike field.
func (r *mutationResolver) CreateReelCommentLike(ctx context.Context, userID string, commentID string) (*model.ReelCommentLike, error) {
	like := &model.ReelCommentLike{
		ID:        uuid.NewString(),
		UserID:    userID,
		CommentID: commentID,
	}
	tx := r.DB.Begin()

	var reelComment *model.ReelComment
	if err := tx.First(&reelComment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	reelComment.Likes = reelComment.Likes + 1

	if err := tx.Save(&reelComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&like).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return like, nil
}

// CreateReelCommentReply is the resolver for the createReelCommentReply field.
func (r *mutationResolver) CreateReelCommentReply(ctx context.Context, userID string, commentID string, reply string) (*model.ReelCommentReply, error) {
	replies := &model.ReelCommentReply{
		ID:        uuid.NewString(),
		UserID:    userID,
		CommentID: commentID,
		Reply:     reply,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Likes:     0,
	}
	tx := r.DB.Begin()

	var reelComment *model.ReelComment
	if err := tx.First(&reelComment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	reelComment.Replies = reelComment.Replies + 1

	if err := tx.Save(&reelComment).Error; err != nil {
		tx.Rollback()
		return nil, err
	}

	if err := tx.Save(&replies).Error; err != nil {
		tx.Rollback()
		return nil, err
	}
	tx.Commit()

	return replies, nil
}

// DeleteReelCommentLike is the resolver for the deleteReelCommentLike field.
func (r *mutationResolver) DeleteReelCommentLike(ctx context.Context, userID string, commentID string) (bool, error) {
	tx := r.DB.Begin()

	res := tx.Delete(&model.ReelCommentLike{}, "user_id = ? AND comment_id = ?", userID, commentID)
	if res.Error != nil {
		tx.Rollback()
		return false, res.Error
	}

	var comment *model.ReelComment
	if err := tx.First(&comment, "id = ?", commentID).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	comment.Likes = comment.Likes - 1
	if err := tx.Save(&comment).Error; err != nil {
		tx.Rollback()
		return false, err
	}
	tx.Commit()

	return true, nil
}

// DeleteReelCommentReply is the resolver for the deleteReelCommentReply field.
func (r *mutationResolver) DeleteReelCommentReply(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteReelCommentReply - deleteReelCommentReply"))
}

// GetPublicReels is the resolver for the getPublicReels field.
func (r *queryResolver) GetPublicReels(ctx context.Context) ([]*model.Reel, error) {
	reels := []*model.Reel{}
	if err := r.DB.Where("privacy = ?", "public").Find(&reels).Error; err != nil {
		return nil, err
	}
	return reels, nil
}

// GetReelVideos is the resolver for the getReelVideos field.
func (r *queryResolver) GetReelVideos(ctx context.Context) ([]*model.ReelVideo, error) {
	var reelVideos []*model.ReelVideo
	return reelVideos, r.DB.Find(&reelVideos).Error
}

// GetLikedReels is the resolver for the getLikedReels field.
func (r *queryResolver) GetLikedReels(ctx context.Context, token string) ([]*model.ReelLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	reels := []*model.ReelLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&reels).Error; err != nil {
		return nil, err
	}
	return reels, nil
}

// GetReelComments is the resolver for the getReelComments field.
func (r *queryResolver) GetReelComments(ctx context.Context, reelID string) ([]*model.ReelComment, error) {
	comments := []*model.ReelComment{}
	if err := r.DB.Where("reel_id = ?", reelID).Order("created_at DESC").Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// GetReelCommentReplies is the resolver for the getReelCommentReplies field.
func (r *queryResolver) GetReelCommentReplies(ctx context.Context, commentID string) ([]*model.ReelCommentReply, error) {
	var reelCommentReplies []*model.ReelCommentReply
	return reelCommentReplies, r.DB.Find(&reelCommentReplies).Error
}

// GetReelLikedComments is the resolver for the getReelLikedComments field.
func (r *queryResolver) GetReelLikedComments(ctx context.Context, token string) ([]*model.ReelCommentLike, error) {
	user, err := r.GetUserByToken(ctx, token)

	if err != nil {
		return nil, err
	}

	comments := []*model.ReelCommentLike{}
	if err := r.DB.Where("user_id = ?", user.ID).Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// User is the resolver for the user field.
func (r *reelResolver) User(ctx context.Context, obj *model.Reel) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *reelCommentResolver) User(ctx context.Context, obj *model.ReelComment) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Reel is the resolver for the reel field.
func (r *reelCommentResolver) Reel(ctx context.Context, obj *model.ReelComment) (*model.Reel, error) {
	reel := &model.Reel{}
	if err := r.DB.Where("id = ?", obj.ReelID).First(reel).Error; err != nil {
		return nil, err
	}
	return reel, nil
}

// User is the resolver for the user field.
func (r *reelCommentLikeResolver) User(ctx context.Context, obj *model.ReelCommentLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Comment is the resolver for the comment field.
func (r *reelCommentLikeResolver) Comment(ctx context.Context, obj *model.ReelCommentLike) (*model.ReelComment, error) {
	comment := &model.ReelComment{}
	if err := r.DB.Where("id = ?", obj.UserID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// User is the resolver for the user field.
func (r *reelCommentReplyResolver) User(ctx context.Context, obj *model.ReelCommentReply) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Comment is the resolver for the comment field.
func (r *reelCommentReplyResolver) Comment(ctx context.Context, obj *model.ReelCommentReply) (*model.ReelComment, error) {
	comment := &model.ReelComment{}
	if err := r.DB.Where("id = ?", obj.UserID).First(comment).Error; err != nil {
		return nil, err
	}
	return comment, nil
}

// User is the resolver for the user field.
func (r *reelLikeResolver) User(ctx context.Context, obj *model.ReelLike) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Reel is the resolver for the reel field.
func (r *reelLikeResolver) Reel(ctx context.Context, obj *model.ReelLike) (*model.Reel, error) {
	reel := &model.Reel{}
	if err := r.DB.Where("id = ?", obj.ReelID).First(reel).Error; err != nil {
		return nil, err
	}
	return reel, nil
}

// Reel is the resolver for the reel field.
func (r *reelVideoResolver) Reel(ctx context.Context, obj *model.ReelVideo) (*model.Reel, error) {
	reel := &model.Reel{}
	if err := r.DB.Where("id = ?", obj.ReelID).First(reel).Error; err != nil {
		return nil, err
	}
	return reel, nil
}

// Reel returns ReelResolver implementation.
func (r *Resolver) Reel() ReelResolver { return &reelResolver{r} }

// ReelComment returns ReelCommentResolver implementation.
func (r *Resolver) ReelComment() ReelCommentResolver { return &reelCommentResolver{r} }

// ReelCommentLike returns ReelCommentLikeResolver implementation.
func (r *Resolver) ReelCommentLike() ReelCommentLikeResolver { return &reelCommentLikeResolver{r} }

// ReelCommentReply returns ReelCommentReplyResolver implementation.
func (r *Resolver) ReelCommentReply() ReelCommentReplyResolver { return &reelCommentReplyResolver{r} }

// ReelLike returns ReelLikeResolver implementation.
func (r *Resolver) ReelLike() ReelLikeResolver { return &reelLikeResolver{r} }

// ReelVideo returns ReelVideoResolver implementation.
func (r *Resolver) ReelVideo() ReelVideoResolver { return &reelVideoResolver{r} }

type reelResolver struct{ *Resolver }
type reelCommentResolver struct{ *Resolver }
type reelCommentLikeResolver struct{ *Resolver }
type reelCommentReplyResolver struct{ *Resolver }
type reelLikeResolver struct{ *Resolver }
type reelVideoResolver struct{ *Resolver }
