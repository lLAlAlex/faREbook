package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/google/uuid"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, inputStory model.NewStory) (*model.Story, error) {
	story := &model.Story{
		ID:        uuid.NewString(),
		UserID:    inputStory.UserID,
		Privacy:   inputStory.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	return story, r.DB.Save(&story).Error
}

// CreateStoryMedia is the resolver for the createStoryMedia field.
func (r *mutationResolver) CreateStoryMedia(ctx context.Context, storyID string, mediaLink string) (*model.StoryMedia, error) {
	storyMedia := &model.StoryMedia{
		ID:        uuid.NewString(),
		StoryID:   storyID,
		MediaLink: mediaLink,
	}
	return storyMedia, r.DB.Save(&storyMedia).Error
}

// DeleteStory is the resolver for the deleteStory field.
func (r *mutationResolver) DeleteStory(ctx context.Context, id string) (bool, error) {
	story := &model.Story{}
	if err := r.DB.Where("id = ?", id).First(&story).Error; err != nil {
		return false, err
	}
	if err := r.DB.Delete(&story).Error; err != nil {
		return false, err
	}
	return true, nil
}

// GetAllStories is the resolver for the getAllStories field.
func (r *queryResolver) GetAllStories(ctx context.Context) ([]*model.Story, error) {
	var stories []*model.Story
	return stories, r.DB.Find(&stories).Error
}

// GetAllStoriesMedia is the resolver for the getAllStoriesMedia field.
func (r *queryResolver) GetAllStoriesMedia(ctx context.Context) ([]*model.StoryMedia, error) {
	var storyMedias []*model.StoryMedia
	return storyMedias, r.DB.Find(&storyMedias).Error
}

// GetUserStories is the resolver for the getUserStories field.
func (r *queryResolver) GetUserStories(ctx context.Context, userID string) ([]*model.Story, error) {
	var loggedInUserStories []*model.Story
	if err := r.DB.Where("user_id = ?", userID).Find(&loggedInUserStories).Error; err != nil {
		return nil, err
	}

	// Fetch friends of the logged-in user
	var friendRecords []*model.Friend
	if err := r.DB.Where("user_id = ?", userID).Find(&friendRecords).Error; err != nil {
		return nil, err
	}

	friendIDs := make([]string, len(friendRecords))
	for i, friendRecord := range friendRecords {
		friendIDs[i] = friendRecord.FriendID
	}

	// Fetch stories of the logged-in user's friends
	var friendStories []*model.Story
	if err := r.DB.Where("user_id IN (?)", friendIDs).Find(&friendStories).Error; err != nil {
		return nil, err
	}

	// Combine and return the stories
	allStories := append(loggedInUserStories, friendStories...)
	return allStories, nil
}

// User is the resolver for the user field.
func (r *storyResolver) User(ctx context.Context, obj *model.Story) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Story is the resolver for the story field.
func (r *storyMediaResolver) Story(ctx context.Context, obj *model.StoryMedia) (*model.Story, error) {
	story := &model.Story{}
	if err := r.DB.Where("id = ?", obj.StoryID).First(story).Error; err != nil {
		return nil, err
	}
	return story, nil
}

// Story returns StoryResolver implementation.
func (r *Resolver) Story() StoryResolver { return &storyResolver{r} }

// StoryMedia returns StoryMediaResolver implementation.
func (r *Resolver) StoryMedia() StoryMediaResolver { return &storyMediaResolver{r} }

type storyResolver struct{ *Resolver }
type storyMediaResolver struct{ *Resolver }
