package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/acad600/WEB-NC-231/graph/model"
	"github.com/acad600/WEB-NC-231/graph/service"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:       uuid.NewString(),
		Name:     inputUser.Name,
		Email:    inputUser.Email,
		Dob:      inputUser.Dob,
		Gender:   inputUser.Gender,
		Password: password,
		Status:   string("Unverified"),
	}
	return user, r.DB.Save(&user).Error
}

// CreateUserProfile is the resolver for the createUserProfile field.
func (r *mutationResolver) CreateUserProfile(ctx context.Context, userID string, imageLink string) (*model.UserProfile, error) {
	userProfile := &model.UserProfile{
		ID:        uuid.NewString(),
		UserID:    userID,
		ImageLink: imageLink,
	}
	return userProfile, r.DB.Save(&userProfile).Error
}

// CreateUserProfileCover is the resolver for the createUserProfileCover field.
func (r *mutationResolver) CreateUserProfileCover(ctx context.Context, userID string, imageLink string) (*model.UserProfileCover, error) {
	userProfile := &model.UserProfileCover{
		ID:        uuid.NewString(),
		UserID:    userID,
		ImageLink: imageLink,
	}
	return userProfile, r.DB.Save(&userProfile).Error
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	user.Name = inputUser.Name
	user.Email = inputUser.Email
	user.Dob = inputUser.Dob
	user.Gender = inputUser.Gender
	user.Password = inputUser.Password
	user.Status = inputUser.Status

	return user, r.DB.Save(&user).Error
}

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, userID string, imageLink string) (*model.UserProfile, error) {
	var userProfile *model.UserProfile

	if err := r.DB.First(&userProfile, "user_id = ?", userID).Error; err != nil {
		return nil, err
	}
	userProfile.ImageLink = imageLink

	return userProfile, r.DB.Save(&userProfile).Error
}

// UpdateUserProfileCover is the resolver for the updateUserProfileCover field.
func (r *mutationResolver) UpdateUserProfileCover(ctx context.Context, userID string, imageLink string) (*model.UserProfileCover, error) {
	var userProfile *model.UserProfileCover

	if err := r.DB.First(&userProfile, "user_id = ?", userID).Error; err != nil {
		return nil, err
	}
	userProfile.ImageLink = imageLink

	return userProfile, r.DB.Save(&userProfile).Error
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// ActivateUser is the resolver for the activateUser field.
func (r *mutationResolver) ActivateUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	user.Status = "Active"

	return user, r.DB.Save(&user).Error
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	var user *model.User

	if err := r.DB.First(&user, "email = ? AND status = ?", email, "Active").Error; err != nil {
		return "", err
	}
	return service.UserLogin(ctx, user.Email, user.Password, user.ID, password)
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, id string, password string) (*model.User, error) {
	var user *model.User
	hashedpassword, err := model.HashPassword(password)

	if err != nil {
		return nil, err
	}

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	user.Password = hashedpassword

	return user, r.DB.Save(&user).Error
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "id = ?", id).Error
}

// GetUserProfile is the resolver for the getUserProfile field.
func (r *queryResolver) GetUserProfile(ctx context.Context, userID string) (*model.UserProfile, error) {
	var userProfile *model.UserProfile
	return userProfile, r.DB.First(&userProfile, "user_id = ?", userID).Error
}

// GetAllUserProfile is the resolver for the getAllUserProfile field.
func (r *queryResolver) GetAllUserProfile(ctx context.Context) ([]*model.UserProfile, error) {
	var userProfile []*model.UserProfile
	return userProfile, r.DB.Find(&userProfile).Error
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "email = ?", email).Error
}

// GetUserByToken is the resolver for the getUserByToken field.
func (r *queryResolver) GetUserByToken(ctx context.Context, token string) (*model.User, error) {
	parsedToken, err := service.JwtValidate(ctx, token)

	if err != nil {
		return nil, err
	}

	if claims, ok := parsedToken.Claims.(*service.JwtCustom); ok && parsedToken.Valid {
		userID := claims.ID

		user, err := r.Query().GetUser(ctx, userID)

		if err != nil {
			return nil, err
		}
		return user, nil
	}
	return nil, fmt.Errorf("Not found")
}

// GetUserProfileCover is the resolver for the getUserProfileCover field.
func (r *queryResolver) GetUserProfileCover(ctx context.Context, userID string) (*model.UserProfileCover, error) {
	var userProfile *model.UserProfileCover
	return userProfile, r.DB.First(&userProfile, "user_id = ?", userID).Error
}

// SearchUser is the resolver for the searchUser field.
func (r *queryResolver) SearchUser(ctx context.Context, query string) ([]*model.User, error) {
	var users []*model.User

	err := r.DB.Where("name ILIKE ?", "%"+query+"%").Find(&users).Error
	if err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *userProfileResolver) User(ctx context.Context, obj *model.UserProfile) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *userProfileCoverResolver) User(ctx context.Context, obj *model.UserProfileCover) (*model.User, error) {
	user := &model.User{}
	if err := r.DB.Where("id = ?", obj.UserID).First(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// UserProfile returns UserProfileResolver implementation.
func (r *Resolver) UserProfile() UserProfileResolver { return &userProfileResolver{r} }

// UserProfileCover returns UserProfileCoverResolver implementation.
func (r *Resolver) UserProfileCover() UserProfileCoverResolver { return &userProfileCoverResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userProfileResolver struct{ *Resolver }
type userProfileCoverResolver struct{ *Resolver }
